# Note: this configuration file assumes you have the following environment variables set
# BEAM_SHARED_INPUTS=/path/to/beam-developers/
# BEAM_OUTPUTS=/path/to/your/preferred/output/destination/
#
# NOTE: use values without ending slash
#
# This file need to be placed in the same folder as other MATSim input file ( population.xml, network.xml, etc.)
# because we need to set context see MatSimBeamConfigBuilder.buildMatSamConf()


my-custom-mailbox {
  mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
}




# Kamon Metrics
# ~~~~~~~~~~~~~~


kamon {


  trace{
    level-of-detail = simple-trace
    sampling = all
  }



  metric {

    # Time interval for collecting all metrics and send the snapshots to all subscribed actors.
    tick-interval = 10 seconds

    # Disables a big error message that will be typically logged if your application wasn't started
    # with the -javaagent:/path-to-aspectj-weaver.jar option. If you are only using KamonStandalone
    # it might be ok for you to turn this error off.
    disable-aspectj-weaver-missing-error = false

    # Specify if entities that do not match any include/exclude filter should be tracked.
    track-unmatched-entities = yes

    filters {
      akka-actor {
        includes = ["beam-actor-system/user/**"]
      }


      trace {
        includes = ["beam-actor-system/user/*"]

      }
    }
  }

  # Controls whether the AspectJ Weaver missing warning should be displayed if any Kamon module requiring AspectJ is
  # found in the classpath but the application is started without the AspectJ Weaver.
  show-aspectj-missing-warning = yes

  statsd {

    # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
    # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
    hostname = "127.0.0.1"
    port = 8125

    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
    # kamon.metric.tick-interval setting.
    flush-interval = 10 seconds

    # Max packet size for UDP metrics data sent to StatsD.
    max-packet-size = 1024 bytes

    # Subscription patterns used to select which metrics will be pushed to StatsD. Note that first, metrics
    # collection for your desired entities must be activated under the kamon.metrics.filters settings.
    subscriptions {
      histogram = ["**"]
      min-max-counter = ["**"]
      gauge = ["**"]
      counter = ["**"]
      trace = ["**"]
      trace-segment = ["**"]
      akka-actor = ["**"]
      akka-dispatcher = ["**"]
      akka-router = ["**"]
      system-metric = ["**"]
      http-server = ["**"]
    }

    # FQCN of the implementation of `kamon.statsd.MetricKeyGenerator` to be instantiated and used for assigning
    # metric names. The implementation must have a single parameter constructor accepting a `com.typesafe.config.Config`.
    metric-key-generator = kamon.statsd.SimpleMetricKeyGenerator

    simple-metric-key-generator {

      # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
      # this pattern:
      #    application.host.entity.entity-name.metric-name
      application = "beam"

      # Includes the name of the hostname in the generated metric. When set to false, the scheme for the metrics
      # will look as follows:
      #    application.entity.entity-name.metric-name
      include-hostname = true

      # Allow users to override the name of the hostname reported by kamon. When changed, the scheme for the metrics
      # will have the following pattern:
      #   application.hostname-override-value.entity.entity-name.metric-name
      hostname-override = none

      # When the sections that make up the metric names have special characters like dots (very common in dispatcher
      # names) or forward slashes (all actor metrics) we need to sanitize those values before sending them to StatsD
      # with one of the following strategies:
      #   - normalize: changes ': ' to '-' and ' ', '/' and '.' to '_'.
      #   - percent-encode: percent encode the section on the metric name. Please note that StatsD doesn't support
      #     percent encoded metric names, this option is only useful if using our docker image which has a patched
      #     version of StatsD or if you are running your own, customized version of StatsD that supports this.
      metric-name-normalization-strategy = normalize
    }
  }

  # modules can be disabled at startup using yes/no arguments.
  modules {
    kamon-log-reporter.auto-start = yes
    kamon-system-metrics.auto-start = yes
    kamon-statsd.auto-start = yes
    kamon-akka.auto-start = yes
  }
}


akka {
  actor {
    default-mailbox {
//      mailbox-type = beam.performance.
    }
    dispatcher {
//      mailbox-type = beam.performance.MonitorMailboxType
    }
    serializers {
      #      java = "akka.serialization.JavaSerializer"
    }
    serialization-bindings {
      #      java = "java.lang.String"
    }
    debug {
      # enable DEBUG logging of unhandled messages
      unhandled = on
    }
  }

  extensions = ["kamon.statsd.StatsD"]

  loglevel = "INFO"
  remote {
    # If this is "on", Akka will log all outbound messages at DEBUG level,
    # if off then they are not logged
    log-sent-messages = on
  }
}
##################################################################
# SIMULATION
##################################################################
beam.sharedInputs = ${PWD}"/production/application-sfbay"
beam.sharedInputs = ${?BEAM_SHARED_INPUTS}
beam.basePackage = "beam"
beam.agentsim.simulationName = "sf-bay"
beam.agentsim.numAgents = 80000
beam.agentsim.debugEnabled = 0
beam.agentsim.thresholdForWalkingInMeters = 100
# MODE CHOICE
beam.agentsim.agents.modalBehaviors.modeChoiceClass = "ModeChoiceRideHailIfAvailable"
beam.agentsim.agents.modalBehaviors.modeChoiceParametersFile = ${beam.sharedInputs}"/modeChoiceParameters.xml"

# EPSG:32730

##################################################################
# OUTPUTS
##################################################################
beam.outputs.outputDirectory = ${PWD}"/test/output"
beam.outputs.outputDirectory = ${?BEAM_OUTPUTS}
beam.outputs.eventsFileOutputFormats = "xml" # valid options: xml(.gz) , csv(.gz), none - DEFAULT: csv.gz

# To keep all logging params in one place, BEAM overrides MATSim params normally in the controller config module
beam.outputs.writeEventsInterval = 1
beam.outputs.writePlansInterval = 0

# Exploding events will break all event writers up into individual files by event type
beam.outputs.explodeEventsIntoFiles = false

# Logging Levels:
# >0 enables loggin, <=0 suppresses logging.
# Any event types not explicitly listed take on Default.level
beam.outputs.defaultLoggingLevel = 1
beam.outputs.overrideLoggingLevels = [
  {classname: "beam.playground.metasim.events.ActionEvent", value: 1},
  {classname: "beam.playground.metasim.events.TransitionEvent", value: 1}
]

##################################################################
# Logger Filtering
##################################################################
//Specify log level,If logger empty no logs from MATSIM and other classes.
// you can specify more than one logger level like INFO,WARN
beam.levels.loggerLevels = [""]  //valid options INFO,WARN,DEBUG,TRACE,ERROR

##################################################################
# SPATIAL
##################################################################

beam.spatial = {
  localCRS = "epsg:26910"  # what crs to use for distance calculations, must be in units of meters
  boundingBoxBuffer = 5000 # meters of buffer around network for defining extend of spatial indices
}

##################################################################
# BEAM ROUTING SERVICE
##################################################################
beam.routing {
  routerClass = "beam.router.r5.R5RoutingWorker"
  #Base local date in ISO 8061 YYYY-MM-DDTHH:MM:SS+HH:MM
  baseDate = "2016-10-17T00:00:00-07:00"
  r5 {
    directory = ${beam.sharedInputs}"/r5"
    # Departure window in min
    departureWindow = 15
  }


  ##################################################################
  # GTFS Downloader Params
  ##################################################################
  gtfs {
    operatorsFile = "src/main/resources/GTFSOperators.csv"
    outputDir = ${beam.outputs.outputDirectory}"/gtfs"
    apiKey = ${?GTFS_API_KEY}
    crs = "epsg:26910"
  }
}

##################################################################
# Events Filtering
##################################################################
beam.events.pathTraversalEvents = ["car", "bus", "subway", "tram", "rail", "car", "walk", "ride_hailing", "cable_car"]
beam.events.filterDist = 10000.0

##################################################################
# Ride Hailing Params
##################################################################
beam.rideHailing.defaultCostPerMile = 1.25


##################################################################
# MATSim Modules
##################################################################

matsim.modules {
  global {
    randomSeed = 4711
    coordinateSystem = "epsg:26910"
  }
  network {
    inputNetworkFile = ${beam.sharedInputs}"/physsim-network.xml"
  }
  plans {
    inputPlansFile = ${beam.sharedInputs}"/population.xml.gz"
    inputPersonAttributesFile = ${beam.sharedInputs}"/populationAttributes.xml.gz"
  }
  households {
    inputFile = ${beam.sharedInputs}"/households.xml.gz"
    inputHouseholdAttributesFile = ${beam.sharedInputs}"/householdAttributes.xml.gz"
  }
  vehicles {
    vehiclesFile = ${beam.sharedInputs}"/vehicles.xml.gz"
  }
  strategy {
    maxAgentPlanMemorySize = 5

    ModuleProbability_1 = 0.7
    Module_1 = "BestScore"

    #    ModuleProbability_2 = 0.1
    #    Module_2 = "ReRoute"

    ModuleProbability_3 = 0.1
    Module_3 = "TimeAllocationMutator"

    #    ModuleProbability_4 = 0.1
    #    Module_4 = "ChangeTripMode"
  }
  parallelEventHandling {
    #Estimated number of events during mobsim run. An optional optimization hint for the framework.
    estimatedNumberOfEvents = 1000000000
    #Number of threads for parallel events handler. 0 or null means the framework decides by itself.
    numberOfThreads = 1
    #If enabled, each event handler is assigned to its own thread. Note that enabling this feature disabled the numberOfThreads option! This feature is still experimental!
    oneThreadPerHandler = false
    # If enabled, it is ensured that all events that are created during a time step of the mobility simulation are processed before the next time step is simulated. E.g. neccessary when within-day replanning is used.
    synchronizeOnSimSteps = false
  }
  controler {
    outputDirectory = ${beam.outputs.outputDirectory}"/pt-tutorial"
    firstIteration = 0
    lastIteration = 0
    eventsFileFormat = "xml"
    #Replacing w/ own mobsim soon...
    mobsim = "metasim"
  }
  qsim {
    #"start/endTime" of MobSim (00:00:00 == take earliest activity time/ run as long as active vehicles exist) -->
    startTime = "00:00:00"
    endTime = "30:00:00"
    #00:00:00 means NO snapshot writing
    snapshotperiod = "00:00:00"
  }
  transit {
    useTransit = false
    vehiclesFile = "transitVehicles.xml"
    transitModes = "pt"
  }
  changeMode {
    modes = "car,pt"
  }
  planCalcScore {
    learningRate = "1.0"
    BrainExpBeta = "2.0"
    lateArrival = "-18"
    earlyDeparture = "-0"
    performing = "+6"
    traveling = "-6"
    waiting = "-0"

    parameterset = [
      {
        type = "activityParams"
        activityType = "Home"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "01:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Work"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "9:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Shopping"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "9:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Social"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "4:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Eatout"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "2:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "School"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "8:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Escort"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "00:30:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "University"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "08:00:00"
        typicalDurationScoreComputation = "uniform"
      }, {
        type = "activityParams"
        activityType = "Other"
        priority = 1.0
        scoringThisActivityAtAll = true
        typicalDuration = "02:00:00"
        typicalDurationScoreComputation = "uniform"
      }
    ]
  }
}

